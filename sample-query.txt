{job=~".*etheus"}
http_requests_total{job=~".*etheus"}
http_requests_total{code!~"4.."}
http_requests_total{code!~"2.."}
rate(http_requests_total{job=~".*etheus", method="get"}[5m])
rate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100"}[1m])
http_requests_total{code=~"2.*|4.*"}



Function

rate(http_requests_total[5m])
sum(rate(http_requests_total[5m])) by (job)

( node_memory_MemTotal_bytes  - node_memory_MemFree_bytes ) /1024 /1024


topk(3,sum(rate(node_cpu_seconds_total[15m]))) by (app)
topk(3,sum(rate(node_cpu_seconds_total[15m]))) by (app)



Grafana
========>
node_cpu_seconds_total{job="node_exporter",instance="localhost:9100"}

rate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100",mode!="idle"}[1m])

irate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100",mode!="idle"}[1m])

avg without(cpu) (rate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100",mode!="idle"}[1m]) )

Legend: {{mode}}


avg without(cpu) (rate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100",mode!="idle"}[1m]) )







Used : 

node_memory_MemTotal_bytes{instance="172.31.0.101:9100", job="node_exporter"} - node_memory_MemFree_bytes{instance="172.31.0.101:9100", job="node_exporter"} - node_memory_Cached_bytes{instance="172.31.0.101:9100", job="node_exporter"} - node_memory_Buffers_bytes{instance="172.31.0.101:9100", job="node_exporter"}

Free: 
node_memory_MemFree_bytes{instance="172.31.0.101:9100", job="node_exporter"}

Buffer:
node_memory_Buffers_bytes{instance="172.31.0.101:9100", job="node_exporter"}

Cached:
node_memory_Cached_bytes{instance="172.31.0.101:9100", job="node_exporter"}




Guage
======>

100 -
(
  avg(node_memory_MemAvailable_bytes{job="node", instance="$instance"})
/
  avg(node_memory_MemTotal_bytes{job="node", instance="$instance"})
* 100
)

Avaliable: 

avg(node_memory_MemAvailable_bytes{job="node", instance="$instance"})




Flask_App
=========>
( rate(mysql_query_latency_seconds_sum[5m]) / rate(mysql_query_latency_seconds_count[5m]) )

sum(rate(flask_request_latency_seconds_bucket{le="1.0"}[5m])) by (job) / sum(rate(flask_request_latency_seconds_count[5m])) by (job)

( sum(rate(flask_request_latency_seconds_bucket{le="0.25"}[5m])) by (job) + sum(rate(flask_request_latency_seconds_bucket{le="1.0"}[5m])) by (job)  )/  2 / sum(rate(flask_request_latency_seconds_count[5m])) by (job)	



To improve the score : 
 while true; do time curl localhost:5000/query; done

To decrease the score: 
while true; do time curl localhost:5000/sleep; done


